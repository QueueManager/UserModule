

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Nov 18 16:34:53 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000D                     	;# 
    44  000E                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0013                     	;# 
    51  0014                     	;# 
    52  0015                     	;# 
    53  0015                     	;# 
    54  0016                     	;# 
    55  0017                     	;# 
    56  0018                     	;# 
    57  0019                     	;# 
    58  001A                     	;# 
    59  001B                     	;# 
    60  001B                     	;# 
    61  001C                     	;# 
    62  001D                     	;# 
    63  001E                     	;# 
    64  001F                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  0087                     	;# 
    69  0089                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  008F                     	;# 
    74  0090                     	;# 
    75  0091                     	;# 
    76  0092                     	;# 
    77  0093                     	;# 
    78  0093                     	;# 
    79  0093                     	;# 
    80  0094                     	;# 
    81  0095                     	;# 
    82  0096                     	;# 
    83  0097                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009E                     	;# 
    91  009F                     	;# 
    92  0105                     	;# 
    93  0107                     	;# 
    94  0108                     	;# 
    95  0109                     	;# 
    96  010C                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  010E                     	;# 
   100  010F                     	;# 
   101  0185                     	;# 
   102  0187                     	;# 
   103  0188                     	;# 
   104  0189                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107                           
   108                           	psect	idataBANK0
   109  03DD                     __pidataBANK0:	
   110                           
   111                           ;initializer for SPI_sendString@F1589
   112  03DD  3401               	retlw	1
   113  03DE  3400               	retlw	0
   114  03DF  3400               	retlw	0
   115  03E0  3401               	retlw	1
   116  000B                     _INTCON	set	11
   117  000B                     _INTCONbits	set	11
   118  000C                     _PIR1bits	set	12
   119  0005                     _PORTA	set	5
   120  0005                     _PORTAbits	set	5
   121  0006                     _PORTB	set	6
   122  0006                     _PORTBbits	set	6
   123  0007                     _PORTC	set	7
   124  001A                     _RCREG	set	26
   125  0018                     _RCSTA	set	24
   126  0018                     _RCSTAbits	set	24
   127  0013                     _SSPBUF	set	19
   128  0014                     _SSPCON	set	20
   129  0014                     _SSPCONbits	set	20
   130  0019                     _TXREG	set	25
   131  0096                     _IOCB	set	150
   132  008F                     _OSCCON	set	143
   133  008C                     _PIE1	set	140
   134  008C                     _PIE1bits	set	140
   135  0099                     _SPBRG	set	153
   136  0094                     _SSPSTAT	set	148
   137  0094                     _SSPSTATbits	set	148
   138  0085                     _TRISA	set	133
   139  0086                     _TRISB	set	134
   140  0098                     _TXSTAbits	set	152
   141  042D                     _TRISA5	set	1069
   142  043B                     _TRISC3	set	1083
   143  043C                     _TRISC4	set	1084
   144  043D                     _TRISC5	set	1085
   145  043E                     _TRISC6	set	1086
   146  043F                     _TRISC7	set	1087
   147  040F                     _nRBPU	set	1039
   148  0188                     _ANSEL	set	392
   149  0189                     _ANSELH	set	393
   150                           
   151                           ; #config settings
   152  0000                     
   153                           	psect	cinit
   154  0013                     start_initialization:	
   155  0013                     __initialization:	
   156                           
   157                           ; Initialize objects allocated to BANK0
   158  0013  118A  23DD  118A   	fcall	__pidataBANK0	;fetch initializer
   159  0016  00E0               	movwf	__pdataBANK0& (0+127)
   160  0017  118A  23DE  118A   	fcall	__pidataBANK0+1	;fetch initializer
   161  001A  00E1               	movwf	(__pdataBANK0+1)& (0+127)
   162  001B  118A  23DF  118A   	fcall	__pidataBANK0+2	;fetch initializer
   163  001E  00E2               	movwf	(__pdataBANK0+2)& (0+127)
   164  001F  118A  23E0  118A   	fcall	__pidataBANK0+3	;fetch initializer
   165  0022  00E3               	movwf	(__pdataBANK0+3)& (0+127)
   166                           
   167                           ; Clear objects allocated to BANK2
   168  0023  1783               	bsf	3,7	;select IRP bank2
   169  0024  3020               	movlw	low __pbssBANK2
   170  0025  0084               	movwf	4
   171  0026  3048               	movlw	low (__pbssBANK2+40)
   172  0027  118A  23C8  118A   	fcall	clear_ram0
   173                           
   174                           ; Clear objects allocated to BANK1
   175  002A  1383               	bcf	3,7	;select IRP bank0
   176  002B  30A0               	movlw	low __pbssBANK1
   177  002C  0084               	movwf	4
   178  002D  30F0               	movlw	low (__pbssBANK1+80)
   179  002E  118A  23C8  118A   	fcall	clear_ram0
   180                           
   181                           ; Clear objects allocated to BANK0
   182  0031  3020               	movlw	low __pbssBANK0
   183  0032  0084               	movwf	4
   184  0033  3057               	movlw	low (__pbssBANK0+55)
   185  0034  118A  23C8  118A   	fcall	clear_ram0
   186                           
   187                           ; Clear objects allocated to COMMON
   188  0037  3078               	movlw	low __pbssCOMMON
   189  0038  0084               	movwf	4
   190  0039  307E               	movlw	low (__pbssCOMMON+6)
   191  003A  118A  23C8         	fcall	clear_ram0
   192  003C                     end_of_initialization:	
   193                           ;End of C runtime variable initialization code
   194                           
   195  003C                     __end_of__initialization:	
   196  003C  0183               	clrf	3
   197  003D  118A  2A7D         	ljmp	_main	;jump to C main() function
   198                           
   199                           	psect	bssCOMMON
   200  0078                     __pbssCOMMON:	
   201  0078                     _clast:	
   202  0078                     	ds	1
   203  0079                     _csize:	
   204  0079                     	ds	1
   205  007A                     _mlast:	
   206  007A                     	ds	1
   207  007B                     _msize:	
   208  007B                     	ds	1
   209  007C                     _pmlast:	
   210  007C                     	ds	1
   211  007D                     _pmsize:	
   212  007D                     	ds	1
   213                           
   214                           	psect	bssBANK0
   215  0020                     __pbssBANK0:	
   216  0020                     _mqueue:	
   217  0020                     	ds	40
   218  0048                     _cCount:	
   219  0048                     	ds	2
   220  004A                     _mCount:	
   221  004A                     	ds	2
   222  004C                     _pcCount:	
   223  004C                     	ds	2
   224  004E                     _pmCount:	
   225  004E                     	ds	2
   226  0050                     _cnext:	
   227  0050                     	ds	1
   228  0051                     _guiche:	
   229  0051                     	ds	1
   230  0052                     _mnext:	
   231  0052                     	ds	1
   232  0053                     _pclast:	
   233  0053                     	ds	1
   234  0054                     _pcnext:	
   235  0054                     	ds	1
   236  0055                     _pcsize:	
   237  0055                     	ds	1
   238  0056                     _pmnext:	
   239  0056                     	ds	1
   240                           
   241                           	psect	dataBANK0
   242  0060                     __pdataBANK0:	
   243  0060                     SPI_sendString@F1589:	
   244  0060                     	ds	4
   245                           
   246                           	psect	bssBANK1
   247  00A0                     __pbssBANK1:	
   248  00A0                     _cqueue:	
   249  00A0                     	ds	40
   250  00C8                     _pmqueue:	
   251  00C8                     	ds	40
   252                           
   253                           	psect	bssBANK2
   254  0120                     __pbssBANK2:	
   255  0120                     _pcqueue:	
   256  0120                     	ds	40
   257                           
   258                           	psect	clrtext
   259  03C8                     clear_ram0:	
   260                           ;	Called with FSR containing the base address, and
   261                           ;	W with the last address+1
   262                           
   263  03C8  0064               	clrwdt	;clear the watchdog before getting into this loop
   264  03C9                     clrloop0:	
   265  03C9  0180               	clrf	0	;clear RAM location pointed to by FSR
   266  03CA  0A84               	incf	4,f	;increment pointer
   267  03CB  0604               	xorwf	4,w	;XOR with final address
   268  03CC  1903               	btfsc	3,2	;have we reached the end yet?
   269  03CD  3400               	retlw	0	;all done for this memory range, return
   270  03CE  0604               	xorwf	4,w	;XOR again to restore value
   271  03CF  2BC9               	goto	clrloop0	;do the next byte
   272                           
   273                           	psect	cstackCOMMON
   274  0070                     __pcstackCOMMON:	
   275  0070                     ?_SPI_send:	
   276  0070                     ??_SPI_send:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_SPI_sendString:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_getNextManager:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ??_getNextManager:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_CashierNormalButton:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_ManagerNormalButton:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_buttonINT:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_overflow:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_tx_serial:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_rx_serial:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_new_at_com:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_wait_ok:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_wait_Connect:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_connect_wifi:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_usartInit:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_main:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     SPI_send@data:	
   325                           ; 1 bytes @ 0x0
   326                           
   327                           
   328                           ; 1 bytes @ 0x0
   329  0070                     	ds	1
   330  0071                     ??_SPI_sendString:	
   331  0071                     ??_ManagerNormalButton:	
   332                           ; 1 bytes @ 0x1
   333                           
   334  0071                     SPI_sendString@data:	
   335                           ; 1 bytes @ 0x1
   336                           
   337                           
   338                           ; 4 bytes @ 0x1
   339  0071                     	ds	4
   340  0075                     SPI_sendString@i:	
   341                           
   342                           ; 2 bytes @ 0x5
   343  0075                     	ds	2
   344  0077                     ??_CashierNormalButton:	
   345                           
   346                           ; 1 bytes @ 0x7
   347  0077                     	ds	1
   348                           
   349                           	psect	cstackBANK0
   350  0057                     __pcstackBANK0:	
   351  0057                     ??_buttonINT:	
   352                           
   353                           ; 1 bytes @ 0x0
   354  0057                     	ds	7
   355  005E                     ??_overflow:	
   356  005E                     ??_tx_serial:	
   357                           ; 1 bytes @ 0x7
   358                           
   359  005E                     ??_rx_serial:	
   360                           ; 1 bytes @ 0x7
   361                           
   362  005E                     ??_wait_ok:	
   363                           ; 1 bytes @ 0x7
   364                           
   365  005E                     ??_wait_Connect:	
   366                           ; 1 bytes @ 0x7
   367                           
   368  005E                     ??_usartInit:	
   369                           ; 1 bytes @ 0x7
   370                           
   371  005E                     tx_serial@aChar:	
   372                           ; 1 bytes @ 0x7
   373                           
   374                           
   375                           ; 1 bytes @ 0x7
   376  005E                     	ds	1
   377  005F                     ??_new_at_com:	
   378  005F                     ??_connect_wifi:	
   379                           ; 1 bytes @ 0x8
   380                           
   381  005F                     ??_main:	
   382                           ; 1 bytes @ 0x8
   383                           
   384                           
   385                           ; 1 bytes @ 0x8
   386  005F                     	ds	1
   387                           
   388                           	psect	maintext
   389  027D                     __pmaintext:	
   390 ;;
   391 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   392 ;;
   393 ;; *************** function _main *****************
   394 ;; Defined at:
   395 ;;		line 527 in file "main.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;		None
   398 ;; Auto vars:     Size  Location     Type
   399 ;;		None
   400 ;; Return value:  Size  Location     Type
   401 ;;                  1    wreg      void 
   402 ;; Registers used:
   403 ;;		wreg, status,2, status,0, pclath, cstack
   404 ;; Tracked objects:
   405 ;;		On entry : B00/0
   406 ;;		On exit  : 0/0
   407 ;;		Unchanged: 0/0
   408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   409 ;;      Params:         0       0       0       0
   410 ;;      Locals:         0       0       0       0
   411 ;;      Temps:          0       1       0       0
   412 ;;      Totals:         0       1       0       0
   413 ;;Total ram usage:        1 bytes
   414 ;; Hardware stack levels required when called:    8
   415 ;; This function calls:
   416 ;;		_connect_wifi
   417 ;;		_rx_serial
   418 ;;		_usartInit
   419 ;;		_wait_Connect
   420 ;; This function is called by:
   421 ;;		Startup code after reset
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425                           
   426                           ;psect for function _main
   427  027D                     _main:	
   428                           
   429                           ;main.c: 528: nRBPU = 0;
   430                           
   431                           ;incstack = 0
   432                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   433  027D  1683               	bsf	3,5	;RP0=1, select bank1
   434  027E  1303               	bcf	3,6	;RP1=0, select bank1
   435  027F  1381               	bcf	1,7	;volatile
   436                           
   437                           ;main.c: 530: ANSEL = 0x00;
   438  0280  1683               	bsf	3,5	;RP0=1, select bank3
   439  0281  1703               	bsf	3,6	;RP1=1, select bank3
   440  0282  0188               	clrf	8	;volatile
   441                           
   442                           ;main.c: 531: PORTA = 0x00;
   443  0283  1283               	bcf	3,5	;RP0=0, select bank0
   444  0284  1303               	bcf	3,6	;RP1=0, select bank0
   445  0285  0185               	clrf	5	;volatile
   446                           
   447                           ;main.c: 532: TRISA = 0x00;
   448  0286  1683               	bsf	3,5	;RP0=1, select bank1
   449  0287  1303               	bcf	3,6	;RP1=0, select bank1
   450  0288  0185               	clrf	5	;volatile
   451                           
   452                           ;main.c: 534: PORTC = 0x00;
   453  0289  1283               	bcf	3,5	;RP0=0, select bank0
   454  028A  1303               	bcf	3,6	;RP1=0, select bank0
   455  028B  0187               	clrf	7	;volatile
   456                           
   457                           ;main.c: 535: TRISC7 = 1;
   458  028C  1683               	bsf	3,5	;RP0=1, select bank1
   459  028D  1303               	bcf	3,6	;RP1=0, select bank1
   460  028E  1787               	bsf	7,7	;volatile
   461                           
   462                           ;main.c: 536: TRISC6 = 0;
   463  028F  1307               	bcf	7,6	;volatile
   464                           
   465                           ;main.c: 538: TRISB = 0x1E;
   466  0290  301E               	movlw	30
   467  0291  0086               	movwf	6	;volatile
   468                           
   469                           ;main.c: 539: PORTB = 0xFF;
   470  0292  30FF               	movlw	255
   471  0293  1283               	bcf	3,5	;RP0=0, select bank0
   472  0294  1303               	bcf	3,6	;RP1=0, select bank0
   473  0295  0086               	movwf	6	;volatile
   474                           
   475                           ;main.c: 541: ANSELH = 0x00;
   476  0296  1683               	bsf	3,5	;RP0=1, select bank3
   477  0297  1703               	bsf	3,6	;RP1=1, select bank3
   478  0298  0189               	clrf	9	;volatile
   479                           
   480                           ;main.c: 543: INTCON = 0xC8;
   481  0299  30C8               	movlw	200
   482  029A  008B               	movwf	11	;volatile
   483                           
   484                           ;main.c: 545: IOCB = 0xFF;
   485  029B  30FF               	movlw	255
   486  029C  1683               	bsf	3,5	;RP0=1, select bank1
   487  029D  1303               	bcf	3,6	;RP1=0, select bank1
   488  029E  0096               	movwf	22	;volatile
   489                           
   490                           ;main.c: 546: PIE1 = 0x60;
   491  029F  3060               	movlw	96
   492  02A0  008C               	movwf	12	;volatile
   493                           
   494                           ;main.c: 548: RCSTA = 0x90;
   495  02A1  3090               	movlw	144
   496  02A2  1283               	bcf	3,5	;RP0=0, select bank0
   497  02A3  1303               	bcf	3,6	;RP1=0, select bank0
   498  02A4  0098               	movwf	24	;volatile
   499                           
   500                           ;main.c: 549: TXSTAbits.SYNC = 0x00;
   501  02A5  1683               	bsf	3,5	;RP0=1, select bank1
   502  02A6  1303               	bcf	3,6	;RP1=0, select bank1
   503  02A7  1218               	bcf	24,4	;volatile
   504                           
   505                           ;main.c: 555: mlast = 0x00;
   506  02A8  01FA               	clrf	_mlast
   507                           
   508                           ;main.c: 556: mnext = 0x00;
   509  02A9  1283               	bcf	3,5	;RP0=0, select bank0
   510  02AA  1303               	bcf	3,6	;RP1=0, select bank0
   511  02AB  01D2               	clrf	_mnext
   512                           
   513                           ;main.c: 557: msize = 0x00;
   514  02AC  01FB               	clrf	_msize
   515                           
   516                           ;main.c: 558: pmlast = 0x00;
   517  02AD  01FC               	clrf	_pmlast
   518                           
   519                           ;main.c: 559: pmnext = 0x00;
   520  02AE  01D6               	clrf	_pmnext
   521                           
   522                           ;main.c: 560: pmsize = 0x00;
   523  02AF  01FD               	clrf	_pmsize
   524                           
   525                           ;main.c: 561: clast = 0x00;
   526  02B0  01F8               	clrf	_clast
   527                           
   528                           ;main.c: 562: cnext = 0x00;
   529  02B1  01D0               	clrf	_cnext
   530                           
   531                           ;main.c: 563: csize = 0x00;
   532  02B2  01F9               	clrf	_csize
   533                           
   534                           ;main.c: 564: pclast = 0x00;
   535  02B3  01D3               	clrf	_pclast
   536                           
   537                           ;main.c: 565: pcnext = 0x00;
   538  02B4  01D4               	clrf	_pcnext
   539                           
   540                           ;main.c: 566: pcsize = 0x00;
   541  02B5  01D5               	clrf	_pcsize
   542                           
   543                           ;main.c: 582: OSCCON = 0x70;
   544  02B6  3070               	movlw	112
   545  02B7  1683               	bsf	3,5	;RP0=1, select bank1
   546  02B8  1303               	bcf	3,6	;RP1=0, select bank1
   547  02B9  008F               	movwf	15	;volatile
   548                           
   549                           ;main.c: 583: usartInit();
   550  02BA  118A  2395  118A   	fcall	_usartInit
   551                           
   552                           ;main.c: 584: connect_wifi();
   553  02BD  118A  203F  118A   	fcall	_connect_wifi
   554  02C0                     l1481:	
   555                           ;main.c: 587: while(1)
   556                           
   557                           
   558                           ;main.c: 588: {
   559                           ;main.c: 589: wait_Connect();
   560  02C0  118A  2143  118A   	fcall	_wait_Connect
   561                           
   562                           ;main.c: 590: rx_serial();
   563  02C3  118A  23B0  118A   	fcall	_rx_serial
   564                           
   565                           ;main.c: 591: guiche = RCREG;
   566  02C6  1283               	bcf	3,5	;RP0=0, select bank0
   567  02C7  1303               	bcf	3,6	;RP1=0, select bank0
   568  02C8  081A               	movf	26,w	;volatile
   569  02C9  00DF               	movwf	??_main
   570  02CA  085F               	movf	??_main,w
   571  02CB  00D1               	movwf	_guiche
   572  02CC  2AC0               	goto	l1481
   573  02CD                     __end_of_main:	
   574                           
   575                           	psect	text1
   576  0143                     __ptext1:	
   577 ;; *************** function _wait_Connect *****************
   578 ;; Defined at:
   579 ;;		line 318 in file "main.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;		None
   582 ;; Auto vars:     Size  Location     Type
   583 ;;		None
   584 ;; Return value:  Size  Location     Type
   585 ;;                  1    wreg      void 
   586 ;; Registers used:
   587 ;;		wreg, status,2, status,0, pclath, cstack
   588 ;; Tracked objects:
   589 ;;		On entry : 0/0
   590 ;;		On exit  : 0/0
   591 ;;		Unchanged: 0/0
   592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   593 ;;      Params:         0       0       0       0
   594 ;;      Locals:         0       0       0       0
   595 ;;      Temps:          0       0       0       0
   596 ;;      Totals:         0       0       0       0
   597 ;;Total ram usage:        0 bytes
   598 ;; Hardware stack levels used:    1
   599 ;; Hardware stack levels required when called:    6
   600 ;; This function calls:
   601 ;;		_rx_serial
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           
   608                           ;psect for function _wait_Connect
   609  0143                     _wait_Connect:	
   610  0143                     l225:	
   611                           ;incstack = 0
   612                           ; Regs used in _wait_Connect: [wreg+status,2+status,0+pclath+cstack]
   613                           ;main.c: 319: while (1) {
   614                           
   615                           ;main.c: 402: continue;
   616                           
   617                           ;main.c: 398: continue;
   618                           
   619                           ;main.c: 394: continue;
   620                           
   621                           ;main.c: 390: continue;
   622                           
   623                           ;main.c: 386: continue;
   624                           
   625                           ;main.c: 382: continue;
   626                           
   627                           ;main.c: 378: continue;
   628                           
   629                           ;main.c: 374: continue;
   630                           
   631                           ;main.c: 370: continue;
   632                           
   633                           ;main.c: 366: continue;
   634                           
   635                           ;main.c: 362: continue;
   636                           
   637                           ;main.c: 358: continue;
   638                           
   639                           ;main.c: 354: continue;
   640                           
   641                           ;main.c: 350: continue;
   642                           
   643                           ;main.c: 346: continue;
   644                           
   645                           ;main.c: 342: continue;
   646                           
   647                           ;main.c: 338: continue;
   648                           
   649                           ;main.c: 334: continue;
   650                           
   651                           ;main.c: 330: continue;
   652                           
   653                           ;main.c: 326: continue;
   654                           
   655                           ;main.c: 322: continue;
   656                           
   657                           
   658                           ;main.c: 320: rx_serial();
   659  0143  118A  23B0  118A   	fcall	_rx_serial
   660                           
   661                           ;main.c: 321: if (RCREG != '0') {
   662  0146  3030               	movlw	48
   663  0147  1283               	bcf	3,5	;RP0=0, select bank0
   664  0148  1303               	bcf	3,6	;RP1=0, select bank0
   665  0149  061A               	xorwf	26,w	;volatile
   666  014A  1D03               	btfss	3,2
   667  014B  2943               	goto	l225
   668                           
   669                           ;main.c: 323: }
   670                           ;main.c: 324: rx_serial();
   671  014C  118A  23B0  118A   	fcall	_rx_serial
   672                           
   673                           ;main.c: 325: if (RCREG != ',') {
   674  014F  302C               	movlw	44
   675  0150  1283               	bcf	3,5	;RP0=0, select bank0
   676  0151  1303               	bcf	3,6	;RP1=0, select bank0
   677  0152  061A               	xorwf	26,w	;volatile
   678  0153  1D03               	btfss	3,2
   679  0154  2943               	goto	l225
   680                           
   681                           ;main.c: 327: }
   682                           ;main.c: 328: rx_serial();
   683  0155  118A  23B0  118A   	fcall	_rx_serial
   684                           
   685                           ;main.c: 329: if (RCREG != 'C') {
   686  0158  3043               	movlw	67
   687  0159  1283               	bcf	3,5	;RP0=0, select bank0
   688  015A  1303               	bcf	3,6	;RP1=0, select bank0
   689  015B  061A               	xorwf	26,w	;volatile
   690  015C  1D03               	btfss	3,2
   691  015D  2943               	goto	l225
   692                           
   693                           ;main.c: 331: }
   694                           ;main.c: 332: rx_serial();
   695  015E  118A  23B0  118A   	fcall	_rx_serial
   696                           
   697                           ;main.c: 333: if (RCREG != 'O') {
   698  0161  304F               	movlw	79
   699  0162  1283               	bcf	3,5	;RP0=0, select bank0
   700  0163  1303               	bcf	3,6	;RP1=0, select bank0
   701  0164  061A               	xorwf	26,w	;volatile
   702  0165  1D03               	btfss	3,2
   703  0166  2943               	goto	l225
   704                           
   705                           ;main.c: 335: }
   706                           ;main.c: 336: rx_serial();
   707  0167  118A  23B0  118A   	fcall	_rx_serial
   708                           
   709                           ;main.c: 337: if (RCREG != 'N') {
   710  016A  304E               	movlw	78
   711  016B  1283               	bcf	3,5	;RP0=0, select bank0
   712  016C  1303               	bcf	3,6	;RP1=0, select bank0
   713  016D  061A               	xorwf	26,w	;volatile
   714  016E  1D03               	btfss	3,2
   715  016F  2943               	goto	l225
   716                           
   717                           ;main.c: 339: }
   718                           ;main.c: 340: rx_serial();
   719  0170  118A  23B0  118A   	fcall	_rx_serial
   720                           
   721                           ;main.c: 341: if (RCREG != 'N') {
   722  0173  304E               	movlw	78
   723  0174  1283               	bcf	3,5	;RP0=0, select bank0
   724  0175  1303               	bcf	3,6	;RP1=0, select bank0
   725  0176  061A               	xorwf	26,w	;volatile
   726  0177  1D03               	btfss	3,2
   727  0178  2943               	goto	l225
   728                           
   729                           ;main.c: 343: }
   730                           ;main.c: 344: rx_serial();
   731  0179  118A  23B0  118A   	fcall	_rx_serial
   732                           
   733                           ;main.c: 345: if (RCREG != 'E') {
   734  017C  3045               	movlw	69
   735  017D  1283               	bcf	3,5	;RP0=0, select bank0
   736  017E  1303               	bcf	3,6	;RP1=0, select bank0
   737  017F  061A               	xorwf	26,w	;volatile
   738  0180  1D03               	btfss	3,2
   739  0181  2943               	goto	l225
   740                           
   741                           ;main.c: 347: }
   742                           ;main.c: 348: rx_serial();
   743  0182  118A  23B0  118A   	fcall	_rx_serial
   744                           
   745                           ;main.c: 349: if (RCREG != 'C') {
   746  0185  3043               	movlw	67
   747  0186  1283               	bcf	3,5	;RP0=0, select bank0
   748  0187  1303               	bcf	3,6	;RP1=0, select bank0
   749  0188  061A               	xorwf	26,w	;volatile
   750  0189  1D03               	btfss	3,2
   751  018A  2943               	goto	l225
   752                           
   753                           ;main.c: 351: }
   754                           ;main.c: 352: rx_serial();
   755  018B  118A  23B0  118A   	fcall	_rx_serial
   756                           
   757                           ;main.c: 353: if (RCREG != 'T') {
   758  018E  3054               	movlw	84
   759  018F  1283               	bcf	3,5	;RP0=0, select bank0
   760  0190  1303               	bcf	3,6	;RP1=0, select bank0
   761  0191  061A               	xorwf	26,w	;volatile
   762  0192  1D03               	btfss	3,2
   763  0193  2943               	goto	l225
   764                           
   765                           ;main.c: 355: }
   766                           ;main.c: 356: rx_serial();
   767  0194  118A  23B0  118A   	fcall	_rx_serial
   768                           
   769                           ;main.c: 357: if (RCREG == 0xD) {
   770  0197  300D               	movlw	13
   771  0198  1283               	bcf	3,5	;RP0=0, select bank0
   772  0199  1303               	bcf	3,6	;RP1=0, select bank0
   773  019A  061A               	xorwf	26,w	;volatile
   774  019B  1903               	btfsc	3,2
   775  019C  2943               	goto	l225
   776                           
   777                           ;main.c: 359: }
   778                           ;main.c: 360: rx_serial();
   779  019D  118A  23B0  118A   	fcall	_rx_serial
   780                           
   781                           ;main.c: 361: if (RCREG == 0xA) {
   782  01A0  300A               	movlw	10
   783  01A1  1283               	bcf	3,5	;RP0=0, select bank0
   784  01A2  1303               	bcf	3,6	;RP1=0, select bank0
   785  01A3  061A               	xorwf	26,w	;volatile
   786  01A4  1903               	btfsc	3,2
   787  01A5  2943               	goto	l225
   788                           
   789                           ;main.c: 363: }
   790                           ;main.c: 364: rx_serial();
   791  01A6  118A  23B0  118A   	fcall	_rx_serial
   792                           
   793                           ;main.c: 365: if (RCREG == 0xD) {
   794  01A9  300D               	movlw	13
   795  01AA  1283               	bcf	3,5	;RP0=0, select bank0
   796  01AB  1303               	bcf	3,6	;RP1=0, select bank0
   797  01AC  061A               	xorwf	26,w	;volatile
   798  01AD  1903               	btfsc	3,2
   799  01AE  2943               	goto	l225
   800                           
   801                           ;main.c: 367: }
   802                           ;main.c: 368: rx_serial();
   803  01AF  118A  23B0  118A   	fcall	_rx_serial
   804                           
   805                           ;main.c: 369: if (RCREG == 0xA) {
   806  01B2  300A               	movlw	10
   807  01B3  1283               	bcf	3,5	;RP0=0, select bank0
   808  01B4  1303               	bcf	3,6	;RP1=0, select bank0
   809  01B5  061A               	xorwf	26,w	;volatile
   810  01B6  1903               	btfsc	3,2
   811  01B7  2943               	goto	l225
   812                           
   813                           ;main.c: 371: }
   814                           ;main.c: 372: rx_serial();
   815  01B8  118A  23B0  118A   	fcall	_rx_serial
   816                           
   817                           ;main.c: 373: if (RCREG == '+') {
   818  01BB  302B               	movlw	43
   819  01BC  1283               	bcf	3,5	;RP0=0, select bank0
   820  01BD  1303               	bcf	3,6	;RP1=0, select bank0
   821  01BE  061A               	xorwf	26,w	;volatile
   822  01BF  1903               	btfsc	3,2
   823  01C0  2943               	goto	l225
   824                           
   825                           ;main.c: 375: }
   826                           ;main.c: 376: rx_serial();
   827  01C1  118A  23B0  118A   	fcall	_rx_serial
   828                           
   829                           ;main.c: 377: if (RCREG == 'I') {
   830  01C4  3049               	movlw	73
   831  01C5  1283               	bcf	3,5	;RP0=0, select bank0
   832  01C6  1303               	bcf	3,6	;RP1=0, select bank0
   833  01C7  061A               	xorwf	26,w	;volatile
   834  01C8  1903               	btfsc	3,2
   835  01C9  2943               	goto	l225
   836                           
   837                           ;main.c: 379: }
   838                           ;main.c: 380: rx_serial();
   839  01CA  118A  23B0  118A   	fcall	_rx_serial
   840                           
   841                           ;main.c: 381: if (RCREG == 'P') {
   842  01CD  3050               	movlw	80
   843  01CE  1283               	bcf	3,5	;RP0=0, select bank0
   844  01CF  1303               	bcf	3,6	;RP1=0, select bank0
   845  01D0  061A               	xorwf	26,w	;volatile
   846  01D1  1903               	btfsc	3,2
   847  01D2  2943               	goto	l225
   848                           
   849                           ;main.c: 383: }
   850                           ;main.c: 384: rx_serial();
   851  01D3  118A  23B0  118A   	fcall	_rx_serial
   852                           
   853                           ;main.c: 385: if (RCREG == 'D') {
   854  01D6  3044               	movlw	68
   855  01D7  1283               	bcf	3,5	;RP0=0, select bank0
   856  01D8  1303               	bcf	3,6	;RP1=0, select bank0
   857  01D9  061A               	xorwf	26,w	;volatile
   858  01DA  1903               	btfsc	3,2
   859  01DB  2943               	goto	l225
   860                           
   861                           ;main.c: 387: }
   862                           ;main.c: 388: rx_serial();
   863  01DC  118A  23B0  118A   	fcall	_rx_serial
   864                           
   865                           ;main.c: 389: if (RCREG == ',') {
   866  01DF  302C               	movlw	44
   867  01E0  1283               	bcf	3,5	;RP0=0, select bank0
   868  01E1  1303               	bcf	3,6	;RP1=0, select bank0
   869  01E2  061A               	xorwf	26,w	;volatile
   870  01E3  1903               	btfsc	3,2
   871  01E4  2943               	goto	l225
   872                           
   873                           ;main.c: 391: }
   874                           ;main.c: 392: rx_serial();
   875  01E5  118A  23B0  118A   	fcall	_rx_serial
   876                           
   877                           ;main.c: 393: if (RCREG == '0') {
   878  01E8  3030               	movlw	48
   879  01E9  1283               	bcf	3,5	;RP0=0, select bank0
   880  01EA  1303               	bcf	3,6	;RP1=0, select bank0
   881  01EB  061A               	xorwf	26,w	;volatile
   882  01EC  1903               	btfsc	3,2
   883  01ED  2943               	goto	l225
   884                           
   885                           ;main.c: 395: }
   886                           ;main.c: 396: rx_serial();
   887  01EE  118A  23B0  118A   	fcall	_rx_serial
   888                           
   889                           ;main.c: 397: if (RCREG == ',') {
   890  01F1  302C               	movlw	44
   891  01F2  1283               	bcf	3,5	;RP0=0, select bank0
   892  01F3  1303               	bcf	3,6	;RP1=0, select bank0
   893  01F4  061A               	xorwf	26,w	;volatile
   894  01F5  1903               	btfsc	3,2
   895  01F6  2943               	goto	l225
   896                           
   897                           ;main.c: 399: }
   898                           ;main.c: 400: rx_serial();
   899  01F7  118A  23B0  118A   	fcall	_rx_serial
   900                           
   901                           ;main.c: 401: if (RCREG == '1') {
   902  01FA  3031               	movlw	49
   903  01FB  1283               	bcf	3,5	;RP0=0, select bank0
   904  01FC  1303               	bcf	3,6	;RP1=0, select bank0
   905  01FD  061A               	xorwf	26,w	;volatile
   906  01FE  1903               	btfsc	3,2
   907  01FF  2943               	goto	l225
   908                           
   909                           ;main.c: 403: }
   910                           ;main.c: 404: rx_serial();
   911  0200  118A  23B0  118A   	fcall	_rx_serial
   912                           
   913                           ;main.c: 405: if (RCREG == ':') {
   914  0203  303A               	movlw	58
   915  0204  1283               	bcf	3,5	;RP0=0, select bank0
   916  0205  1303               	bcf	3,6	;RP1=0, select bank0
   917  0206  061A               	xorwf	26,w	;volatile
   918  0207  1903               	btfsc	3,2
   919  0208  0008               	return
   920  0209  2943               	goto	l225
   921  020A                     __end_of_wait_Connect:	
   922                           ;main.c: 406: break;
   923                           
   924                           
   925                           	psect	text2
   926  0395                     __ptext2:	
   927 ;; *************** function _usartInit *****************
   928 ;; Defined at:
   929 ;;		line 519 in file "main.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   943 ;;      Params:         0       0       0       0
   944 ;;      Locals:         0       0       0       0
   945 ;;      Temps:          0       0       0       0
   946 ;;      Totals:         0       0       0       0
   947 ;;Total ram usage:        0 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; Hardware stack levels required when called:    4
   950 ;; This function calls:
   951 ;;		Nothing
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _usartInit
   959  0395                     _usartInit:	
   960                           
   961                           ;main.c: 520: SPBRG = 0xC;
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _usartInit: [wreg]
   965  0395  300C               	movlw	12
   966  0396  1683               	bsf	3,5	;RP0=1, select bank1
   967  0397  1303               	bcf	3,6	;RP1=0, select bank1
   968  0398  0099               	movwf	25	;volatile
   969                           
   970                           ;main.c: 521: PIR1bits.RCIF = 0x00;
   971  0399  1283               	bcf	3,5	;RP0=0, select bank0
   972  039A  1303               	bcf	3,6	;RP1=0, select bank0
   973  039B  128C               	bcf	12,5	;volatile
   974                           
   975                           ;main.c: 522: RCSTAbits.SPEN = 0x01;
   976  039C  1798               	bsf	24,7	;volatile
   977                           
   978                           ;main.c: 523: RCSTAbits.CREN = 0x01;
   979  039D  1618               	bsf	24,4	;volatile
   980                           
   981                           ;main.c: 524: TXSTAbits.SYNC = 0x00;
   982  039E  1683               	bsf	3,5	;RP0=1, select bank1
   983  039F  1303               	bcf	3,6	;RP1=0, select bank1
   984  03A0  1218               	bcf	24,4	;volatile
   985                           
   986                           ;main.c: 525: TXSTAbits.TXEN = 0x01;
   987  03A1  1698               	bsf	24,5	;volatile
   988  03A2  0008               	return
   989  03A3                     __end_of_usartInit:	
   990                           
   991                           	psect	text3
   992  003F                     __ptext3:	
   993 ;; *************** function _connect_wifi *****************
   994 ;; Defined at:
   995 ;;		line 443 in file "main.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;		None
   998 ;; Auto vars:     Size  Location     Type
   999 ;;		None
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg, status,2, status,0, pclath, cstack
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1009 ;;      Params:         0       0       0       0
  1010 ;;      Locals:         0       0       0       0
  1011 ;;      Temps:          0       0       0       0
  1012 ;;      Totals:         0       0       0       0
  1013 ;;Total ram usage:        0 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; Hardware stack levels required when called:    7
  1016 ;; This function calls:
  1017 ;;		_new_at_com
  1018 ;;		_tx_serial
  1019 ;;		_wait_ok
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _connect_wifi
  1027  003F                     _connect_wifi:	
  1028                           
  1029                           ;main.c: 445: new_at_com();
  1030                           
  1031                           ;incstack = 0
  1032                           ; Regs used in _connect_wifi: [wreg+status,2+status,0+pclath+cstack]
  1033  003F  118A  23BC  118A   	fcall	_new_at_com
  1034                           
  1035                           ;main.c: 446: tx_serial('C');
  1036  0042  3043               	movlw	67
  1037  0043  118A  23D0  118A   	fcall	_tx_serial
  1038                           
  1039                           ;main.c: 447: tx_serial('W');
  1040  0046  3057               	movlw	87
  1041  0047  118A  23D0  118A   	fcall	_tx_serial
  1042                           
  1043                           ;main.c: 448: tx_serial('M');
  1044  004A  304D               	movlw	77
  1045  004B  118A  23D0  118A   	fcall	_tx_serial
  1046                           
  1047                           ;main.c: 449: tx_serial('O');
  1048  004E  304F               	movlw	79
  1049  004F  118A  23D0  118A   	fcall	_tx_serial
  1050                           
  1051                           ;main.c: 450: tx_serial('D');
  1052  0052  3044               	movlw	68
  1053  0053  118A  23D0  118A   	fcall	_tx_serial
  1054                           
  1055                           ;main.c: 451: tx_serial('E');
  1056  0056  3045               	movlw	69
  1057  0057  118A  23D0  118A   	fcall	_tx_serial
  1058                           
  1059                           ;main.c: 452: tx_serial('=');
  1060  005A  303D               	movlw	61
  1061  005B  118A  23D0  118A   	fcall	_tx_serial
  1062                           
  1063                           ;main.c: 453: tx_serial('1');
  1064  005E  3031               	movlw	49
  1065  005F  118A  23D0  118A   	fcall	_tx_serial
  1066                           
  1067                           ;main.c: 454: tx_serial(0xD);
  1068  0062  300D               	movlw	13
  1069  0063  118A  23D0  118A   	fcall	_tx_serial
  1070                           
  1071                           ;main.c: 455: tx_serial(0xA);
  1072  0066  300A               	movlw	10
  1073  0067  118A  23D0  118A   	fcall	_tx_serial
  1074                           
  1075                           ;main.c: 456: wait_ok();
  1076  006A  118A  2369  118A   	fcall	_wait_ok
  1077                           
  1078                           ;main.c: 458: new_at_com();
  1079  006D  118A  23BC  118A   	fcall	_new_at_com
  1080                           
  1081                           ;main.c: 459: tx_serial('C');
  1082  0070  3043               	movlw	67
  1083  0071  118A  23D0  118A   	fcall	_tx_serial
  1084                           
  1085                           ;main.c: 460: tx_serial('W');
  1086  0074  3057               	movlw	87
  1087  0075  118A  23D0  118A   	fcall	_tx_serial
  1088                           
  1089                           ;main.c: 461: tx_serial('J');
  1090  0078  304A               	movlw	74
  1091  0079  118A  23D0  118A   	fcall	_tx_serial
  1092                           
  1093                           ;main.c: 462: tx_serial('A');
  1094  007C  3041               	movlw	65
  1095  007D  118A  23D0  118A   	fcall	_tx_serial
  1096                           
  1097                           ;main.c: 463: tx_serial('P');
  1098  0080  3050               	movlw	80
  1099  0081  118A  23D0  118A   	fcall	_tx_serial
  1100                           
  1101                           ;main.c: 464: tx_serial('_');
  1102  0084  305F               	movlw	95
  1103  0085  118A  23D0  118A   	fcall	_tx_serial
  1104                           
  1105                           ;main.c: 465: tx_serial('C');
  1106  0088  3043               	movlw	67
  1107  0089  118A  23D0  118A   	fcall	_tx_serial
  1108                           
  1109                           ;main.c: 466: tx_serial('U');
  1110  008C  3055               	movlw	85
  1111  008D  118A  23D0  118A   	fcall	_tx_serial
  1112                           
  1113                           ;main.c: 467: tx_serial('R');
  1114  0090  3052               	movlw	82
  1115  0091  118A  23D0  118A   	fcall	_tx_serial
  1116                           
  1117                           ;main.c: 468: tx_serial('=');
  1118  0094  303D               	movlw	61
  1119  0095  118A  23D0  118A   	fcall	_tx_serial
  1120                           
  1121                           ;main.c: 469: tx_serial('"');
  1122  0098  3022               	movlw	34
  1123  0099  118A  23D0  118A   	fcall	_tx_serial
  1124                           
  1125                           ;main.c: 470: tx_serial('d');
  1126  009C  3064               	movlw	100
  1127  009D  118A  23D0  118A   	fcall	_tx_serial
  1128                           
  1129                           ;main.c: 471: tx_serial('l');
  1130  00A0  306C               	movlw	108
  1131  00A1  118A  23D0  118A   	fcall	_tx_serial
  1132                           
  1133                           ;main.c: 472: tx_serial('i');
  1134  00A4  3069               	movlw	105
  1135  00A5  118A  23D0  118A   	fcall	_tx_serial
  1136                           
  1137                           ;main.c: 473: tx_serial('n');
  1138  00A8  306E               	movlw	110
  1139  00A9  118A  23D0  118A   	fcall	_tx_serial
  1140                           
  1141                           ;main.c: 474: tx_serial('k');
  1142  00AC  306B               	movlw	107
  1143  00AD  118A  23D0  118A   	fcall	_tx_serial
  1144                           
  1145                           ;main.c: 475: tx_serial('"');
  1146  00B0  3022               	movlw	34
  1147  00B1  118A  23D0  118A   	fcall	_tx_serial
  1148                           
  1149                           ;main.c: 476: tx_serial(',');
  1150  00B4  302C               	movlw	44
  1151  00B5  118A  23D0  118A   	fcall	_tx_serial
  1152                           
  1153                           ;main.c: 477: tx_serial('"');
  1154  00B8  3022               	movlw	34
  1155  00B9  118A  23D0  118A   	fcall	_tx_serial
  1156                           
  1157                           ;main.c: 478: tx_serial('"');
  1158  00BC  3022               	movlw	34
  1159  00BD  118A  23D0  118A   	fcall	_tx_serial
  1160                           
  1161                           ;main.c: 479: tx_serial(0xD);
  1162  00C0  300D               	movlw	13
  1163  00C1  118A  23D0  118A   	fcall	_tx_serial
  1164                           
  1165                           ;main.c: 480: tx_serial(0xA);
  1166  00C4  300A               	movlw	10
  1167  00C5  118A  23D0  118A   	fcall	_tx_serial
  1168                           
  1169                           ;main.c: 481: wait_ok();
  1170  00C8  118A  2369  118A   	fcall	_wait_ok
  1171                           
  1172                           ;main.c: 483: new_at_com();
  1173  00CB  118A  23BC  118A   	fcall	_new_at_com
  1174                           
  1175                           ;main.c: 484: tx_serial('C');
  1176  00CE  3043               	movlw	67
  1177  00CF  118A  23D0  118A   	fcall	_tx_serial
  1178                           
  1179                           ;main.c: 485: tx_serial('P');
  1180  00D2  3050               	movlw	80
  1181  00D3  118A  23D0  118A   	fcall	_tx_serial
  1182                           
  1183                           ;main.c: 486: tx_serial('M');
  1184  00D6  304D               	movlw	77
  1185  00D7  118A  23D0  118A   	fcall	_tx_serial
  1186                           
  1187                           ;main.c: 487: tx_serial('U');
  1188  00DA  3055               	movlw	85
  1189  00DB  118A  23D0  118A   	fcall	_tx_serial
  1190                           
  1191                           ;main.c: 488: tx_serial('X');
  1192  00DE  3058               	movlw	88
  1193  00DF  118A  23D0  118A   	fcall	_tx_serial
  1194                           
  1195                           ;main.c: 489: tx_serial('=');
  1196  00E2  303D               	movlw	61
  1197  00E3  118A  23D0  118A   	fcall	_tx_serial
  1198                           
  1199                           ;main.c: 490: tx_serial('1');
  1200  00E6  3031               	movlw	49
  1201  00E7  118A  23D0  118A   	fcall	_tx_serial
  1202                           
  1203                           ;main.c: 491: tx_serial(0xD);
  1204  00EA  300D               	movlw	13
  1205  00EB  118A  23D0  118A   	fcall	_tx_serial
  1206                           
  1207                           ;main.c: 492: tx_serial(0xA);
  1208  00EE  300A               	movlw	10
  1209  00EF  118A  23D0  118A   	fcall	_tx_serial
  1210                           
  1211                           ;main.c: 493: wait_ok();
  1212  00F2  118A  2369  118A   	fcall	_wait_ok
  1213                           
  1214                           ;main.c: 495: new_at_com();
  1215  00F5  118A  23BC  118A   	fcall	_new_at_com
  1216                           
  1217                           ;main.c: 496: tx_serial('C');
  1218  00F8  3043               	movlw	67
  1219  00F9  118A  23D0  118A   	fcall	_tx_serial
  1220                           
  1221                           ;main.c: 497: tx_serial('I');
  1222  00FC  3049               	movlw	73
  1223  00FD  118A  23D0  118A   	fcall	_tx_serial
  1224                           
  1225                           ;main.c: 498: tx_serial('P');
  1226  0100  3050               	movlw	80
  1227  0101  118A  23D0  118A   	fcall	_tx_serial
  1228                           
  1229                           ;main.c: 499: tx_serial('S');
  1230  0104  3053               	movlw	83
  1231  0105  118A  23D0  118A   	fcall	_tx_serial
  1232                           
  1233                           ;main.c: 500: tx_serial('E');
  1234  0108  3045               	movlw	69
  1235  0109  118A  23D0  118A   	fcall	_tx_serial
  1236                           
  1237                           ;main.c: 501: tx_serial('R');
  1238  010C  3052               	movlw	82
  1239  010D  118A  23D0  118A   	fcall	_tx_serial
  1240                           
  1241                           ;main.c: 502: tx_serial('V');
  1242  0110  3056               	movlw	86
  1243  0111  118A  23D0  118A   	fcall	_tx_serial
  1244                           
  1245                           ;main.c: 503: tx_serial('E');
  1246  0114  3045               	movlw	69
  1247  0115  118A  23D0  118A   	fcall	_tx_serial
  1248                           
  1249                           ;main.c: 504: tx_serial('R');
  1250  0118  3052               	movlw	82
  1251  0119  118A  23D0  118A   	fcall	_tx_serial
  1252                           
  1253                           ;main.c: 505: tx_serial('=');
  1254  011C  303D               	movlw	61
  1255  011D  118A  23D0  118A   	fcall	_tx_serial
  1256                           
  1257                           ;main.c: 506: tx_serial('1');
  1258  0120  3031               	movlw	49
  1259  0121  118A  23D0  118A   	fcall	_tx_serial
  1260                           
  1261                           ;main.c: 507: tx_serial(',');
  1262  0124  302C               	movlw	44
  1263  0125  118A  23D0  118A   	fcall	_tx_serial
  1264                           
  1265                           ;main.c: 508: tx_serial('1');
  1266  0128  3031               	movlw	49
  1267  0129  118A  23D0  118A   	fcall	_tx_serial
  1268                           
  1269                           ;main.c: 509: tx_serial('0');
  1270  012C  3030               	movlw	48
  1271  012D  118A  23D0  118A   	fcall	_tx_serial
  1272                           
  1273                           ;main.c: 510: tx_serial('0');
  1274  0130  3030               	movlw	48
  1275  0131  118A  23D0  118A   	fcall	_tx_serial
  1276                           
  1277                           ;main.c: 511: tx_serial('0');
  1278  0134  3030               	movlw	48
  1279  0135  118A  23D0  118A   	fcall	_tx_serial
  1280                           
  1281                           ;main.c: 512: tx_serial(0xD);
  1282  0138  300D               	movlw	13
  1283  0139  118A  23D0  118A   	fcall	_tx_serial
  1284                           
  1285                           ;main.c: 513: tx_serial(0xA);
  1286  013C  300A               	movlw	10
  1287  013D  118A  23D0  118A   	fcall	_tx_serial
  1288                           
  1289                           ;main.c: 514: wait_ok();
  1290  0140  118A  2369         	fcall	_wait_ok
  1291  0142  0008               	return
  1292  0143                     __end_of_connect_wifi:	
  1293                           
  1294                           	psect	text4
  1295  0369                     __ptext4:	
  1296 ;; *************** function _wait_ok *****************
  1297 ;; Defined at:
  1298 ;;		line 301 in file "main.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0, pclath, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1312 ;;      Params:         0       0       0       0
  1313 ;;      Locals:         0       0       0       0
  1314 ;;      Temps:          0       0       0       0
  1315 ;;      Totals:         0       0       0       0
  1316 ;;Total ram usage:        0 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    6
  1319 ;; This function calls:
  1320 ;;		_rx_serial
  1321 ;; This function is called by:
  1322 ;;		_connect_wifi
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function _wait_ok
  1328  0369                     _wait_ok:	
  1329  0369                     l216:	
  1330                           ;incstack = 0
  1331                           ; Regs used in _wait_ok: [wreg+status,2+status,0+pclath+cstack]
  1332                           ;main.c: 302: while (1) {
  1333                           
  1334                           ;main.c: 309: continue;
  1335                           
  1336                           ;main.c: 305: continue;
  1337                           
  1338                           
  1339                           ;main.c: 303: rx_serial();
  1340  0369  118A  23B0  118A   	fcall	_rx_serial
  1341                           
  1342                           ;main.c: 304: if (RCREG != 'O') {
  1343  036C  304F               	movlw	79
  1344  036D  1283               	bcf	3,5	;RP0=0, select bank0
  1345  036E  1303               	bcf	3,6	;RP1=0, select bank0
  1346  036F  061A               	xorwf	26,w	;volatile
  1347  0370  1D03               	btfss	3,2
  1348  0371  2B69               	goto	l216
  1349                           
  1350                           ;main.c: 306: }
  1351                           ;main.c: 307: rx_serial();
  1352  0372  118A  23B0  118A   	fcall	_rx_serial
  1353                           
  1354                           ;main.c: 308: if (RCREG != 'K') {
  1355  0375  304B               	movlw	75
  1356  0376  1283               	bcf	3,5	;RP0=0, select bank0
  1357  0377  1303               	bcf	3,6	;RP1=0, select bank0
  1358  0378  061A               	xorwf	26,w	;volatile
  1359  0379  1D03               	btfss	3,2
  1360  037A  2B69               	goto	l216
  1361                           
  1362                           ;main.c: 310: }
  1363                           ;main.c: 311: rx_serial();
  1364  037B  118A  23B0  118A   	fcall	_rx_serial
  1365                           
  1366                           ;main.c: 312: if (RCREG == 0xD) {
  1367  037E  300D               	movlw	13
  1368  037F  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0380  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0381  061A               	xorwf	26,w	;volatile
  1371  0382  1903               	btfsc	3,2
  1372  0383  0008               	return
  1373  0384  2B69               	goto	l216
  1374  0385                     __end_of_wait_ok:	
  1375                           ;main.c: 313: break;
  1376                           
  1377                           
  1378                           	psect	text5
  1379  03B0                     __ptext5:	
  1380 ;; *************** function _rx_serial *****************
  1381 ;; Defined at:
  1382 ;;		line 286 in file "main.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;		None
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		status,2, status,0, pclath, cstack
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1396 ;;      Params:         0       0       0       0
  1397 ;;      Locals:         0       0       0       0
  1398 ;;      Temps:          0       0       0       0
  1399 ;;      Totals:         0       0       0       0
  1400 ;;Total ram usage:        0 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    5
  1403 ;; This function calls:
  1404 ;;		_overflow
  1405 ;; This function is called by:
  1406 ;;		_wait_ok
  1407 ;;		_wait_Connect
  1408 ;;		_main
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _rx_serial
  1414  03B0                     _rx_serial:	
  1415  03B0                     l207:	
  1416                           ;incstack = 0
  1417                           ; Regs used in _rx_serial: [status,2+status,0+pclath+cstack]
  1418                           ;main.c: 288: do {
  1419                           
  1420                           
  1421                           ;main.c: 289: if(RCSTAbits.OERR){
  1422  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  1423  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  1424  03B2  1C98               	btfss	24,1	;volatile
  1425  03B3  2BB7               	goto	l1131
  1426                           
  1427                           ;main.c: 290: overflow();
  1428  03B4  118A  23D8  118A   	fcall	_overflow
  1429  03B7                     l1131:	
  1430                           
  1431                           ;main.c: 291: }
  1432                           ;main.c: 292: } while (!PIR1bits.RCIF);
  1433  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  1434  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  1435  03B9  1A8C               	btfsc	12,5	;volatile
  1436  03BA  0008               	return
  1437  03BB  2BB0               	goto	l207
  1438  03BC                     __end_of_rx_serial:	
  1439                           
  1440                           	psect	text6
  1441  03D8                     __ptext6:	
  1442 ;; *************** function _overflow *****************
  1443 ;; Defined at:
  1444 ;;		line 276 in file "main.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;		None
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		None
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1458 ;;      Params:         0       0       0       0
  1459 ;;      Locals:         0       0       0       0
  1460 ;;      Temps:          0       0       0       0
  1461 ;;      Totals:         0       0       0       0
  1462 ;;Total ram usage:        0 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    4
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_rx_serial
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           
  1473                           ;psect for function _overflow
  1474  03D8                     _overflow:	
  1475                           
  1476                           ;main.c: 277: RCSTAbits.CREN = 0x00;
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in _overflow: []
  1480  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  1481  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  1482  03DA  1218               	bcf	24,4	;volatile
  1483                           
  1484                           ;main.c: 278: RCSTAbits.CREN = 0x01;
  1485  03DB  1618               	bsf	24,4	;volatile
  1486  03DC  0008               	return
  1487  03DD                     __end_of_overflow:	
  1488                           
  1489                           	psect	text7
  1490  03BC                     __ptext7:	
  1491 ;; *************** function _new_at_com *****************
  1492 ;; Defined at:
  1493 ;;		line 295 in file "main.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0, pclath, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1507 ;;      Params:         0       0       0       0
  1508 ;;      Locals:         0       0       0       0
  1509 ;;      Temps:          0       0       0       0
  1510 ;;      Totals:         0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    5
  1514 ;; This function calls:
  1515 ;;		_tx_serial
  1516 ;; This function is called by:
  1517 ;;		_connect_wifi
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           
  1522                           ;psect for function _new_at_com
  1523  03BC                     _new_at_com:	
  1524                           
  1525                           ;main.c: 296: tx_serial('A');
  1526                           
  1527                           ;incstack = 0
  1528                           ; Regs used in _new_at_com: [wreg+status,2+status,0+pclath+cstack]
  1529  03BC  3041               	movlw	65
  1530  03BD  118A  23D0  118A   	fcall	_tx_serial
  1531                           
  1532                           ;main.c: 297: tx_serial('T');
  1533  03C0  3054               	movlw	84
  1534  03C1  118A  23D0  118A   	fcall	_tx_serial
  1535                           
  1536                           ;main.c: 298: tx_serial('+');
  1537  03C4  302B               	movlw	43
  1538  03C5  118A  23D0         	fcall	_tx_serial
  1539  03C7  0008               	return
  1540  03C8                     __end_of_new_at_com:	
  1541                           
  1542                           	psect	text8
  1543  03D0                     __ptext8:	
  1544 ;; *************** function _tx_serial *****************
  1545 ;; Defined at:
  1546 ;;		line 281 in file "main.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;  aChar           1    wreg     unsigned char 
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;  aChar           1    7[BANK0 ] unsigned char 
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1560 ;;      Params:         0       0       0       0
  1561 ;;      Locals:         0       1       0       0
  1562 ;;      Temps:          0       0       0       0
  1563 ;;      Totals:         0       1       0       0
  1564 ;;Total ram usage:        1 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    4
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_new_at_com
  1571 ;;		_connect_wifi
  1572 ;;		_send_IPD
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function _tx_serial
  1578  03D0                     _tx_serial:	
  1579                           
  1580                           ;incstack = 0
  1581                           ; Regs used in _tx_serial: [wreg]
  1582                           ;tx_serial@aChar stored from wreg
  1583  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1584  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  1585  03D2  00DE               	movwf	tx_serial@aChar
  1586  03D3                     l201:	
  1587                           ;main.c: 282: while(!PIR1bits.TXIF) { }
  1588                           
  1589  03D3  1E0C               	btfss	12,4	;volatile
  1590  03D4  2BD3               	goto	l201
  1591                           
  1592                           ;main.c: 283: TXREG = aChar;
  1593  03D5  085E               	movf	tx_serial@aChar,w
  1594  03D6  0099               	movwf	25	;volatile
  1595  03D7  0008               	return
  1596  03D8                     __end_of_tx_serial:	
  1597                           
  1598                           	psect	text9
  1599  020A                     __ptext9:	
  1600 ;; *************** function _buttonINT *****************
  1601 ;; Defined at:
  1602 ;;		line 236 in file "main.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1616 ;;      Params:         0       0       0       0
  1617 ;;      Locals:         0       0       0       0
  1618 ;;      Temps:          0       7       0       0
  1619 ;;      Totals:         0       7       0       0
  1620 ;;Total ram usage:        7 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    3
  1623 ;; This function calls:
  1624 ;;		_CashierNormalButton
  1625 ;;		_ManagerNormalButton
  1626 ;;		_getNextManager
  1627 ;; This function is called by:
  1628 ;;		Interrupt level 1
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           
  1633                           ;psect for function _buttonINT
  1634  020A                     _buttonINT:	
  1635                           
  1636                           ;main.c: 238: if(INTCONbits.RBIF){
  1637  020A  1C0B               	btfss	11,0	;volatile
  1638  020B  2A70               	goto	L1
  1639                           
  1640                           ;main.c: 241: if(!PORTBbits.RB4){
  1641  020C  1A06               	btfsc	6,4	;volatile
  1642  020D  2A4F               	goto	i1l186
  1643                           
  1644                           ;main.c: 242: ManagerNormalButton();
  1645  020E  118A  22CD  118A   	fcall	_ManagerNormalButton
  1646                           
  1647                           ;main.c: 243: PORTAbits.RA0 = 0x01;
  1648  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1649  0212  1303               	bcf	3,6	;RP1=0, select bank0
  1650  0213  1405               	bsf	5,0	;volatile
  1651                           
  1652                           ;main.c: 244: _delay((unsigned long)((500)*(8000000/4000.0)));
  1653  0214  3006               	movlw	6
  1654  0215  00D9               	movwf	??_buttonINT+2
  1655  0216  3013               	movlw	19
  1656  0217  00D8               	movwf	??_buttonINT+1
  1657  0218  30B1               	movlw	177
  1658  0219  00D7               	movwf	??_buttonINT
  1659  021A                     u100_27:	
  1660  021A  0BD7               	decfsz	??_buttonINT,f
  1661  021B  2A1A               	goto	u100_27
  1662  021C  0BD8               	decfsz	??_buttonINT+1,f
  1663  021D  2A1A               	goto	u100_27
  1664  021E  0BD9               	decfsz	??_buttonINT+2,f
  1665  021F  2A1A               	goto	u100_27
  1666  0220  2A21               	nop2
  1667                           
  1668                           ;main.c: 245: PORTAbits.RA0 = 0x00;
  1669  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1671  0223  1005               	bcf	5,0	;volatile
  1672                           
  1673                           ;main.c: 247: if(msize == 0x0A){
  1674  0224  300A               	movlw	10
  1675  0225  067B               	xorwf	_msize,w
  1676  0226  1D03               	btfss	3,2
  1677  0227  2A39               	goto	i1l1427
  1678                           
  1679                           ;main.c: 248: PORTAbits.RA1 = 0x01;
  1680  0228  1485               	bsf	5,1	;volatile
  1681                           
  1682                           ;main.c: 249: _delay((unsigned long)((500)*(8000000/4000.0)));
  1683  0229  3006               	movlw	6
  1684  022A  00D9               	movwf	??_buttonINT+2
  1685  022B  3013               	movlw	19
  1686  022C  00D8               	movwf	??_buttonINT+1
  1687  022D  30B1               	movlw	177
  1688  022E  00D7               	movwf	??_buttonINT
  1689  022F                     u101_27:	
  1690  022F  0BD7               	decfsz	??_buttonINT,f
  1691  0230  2A2F               	goto	u101_27
  1692  0231  0BD8               	decfsz	??_buttonINT+1,f
  1693  0232  2A2F               	goto	u101_27
  1694  0233  0BD9               	decfsz	??_buttonINT+2,f
  1695  0234  2A2F               	goto	u101_27
  1696  0235  2A36               	nop2
  1697                           
  1698                           ;main.c: 250: PORTAbits.RA1 = 0x00;
  1699  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1700  0237  1303               	bcf	3,6	;RP1=0, select bank0
  1701  0238  1085               	bcf	5,1	;volatile
  1702  0239                     i1l1427:	
  1703                           
  1704                           ;main.c: 251: }
  1705                           ;main.c: 252: if(msize == 0x13){
  1706  0239  3013               	movlw	19
  1707  023A  067B               	xorwf	_msize,w
  1708  023B  1D03               	btfss	3,2
  1709  023C  2A6F               	goto	i1l185
  1710                           
  1711                           ;main.c: 253: PORTAbits.RA2 = 0x01;
  1712  023D  1505               	bsf	5,2	;volatile
  1713                           
  1714                           ;main.c: 254: _delay((unsigned long)((500)*(8000000/4000.0)));
  1715  023E  3006               	movlw	6
  1716  023F  00D9               	movwf	??_buttonINT+2
  1717  0240  3013               	movlw	19
  1718  0241  00D8               	movwf	??_buttonINT+1
  1719  0242  30B1               	movlw	177
  1720  0243  00D7               	movwf	??_buttonINT
  1721  0244                     u102_27:	
  1722  0244  0BD7               	decfsz	??_buttonINT,f
  1723  0245  2A44               	goto	u102_27
  1724  0246  0BD8               	decfsz	??_buttonINT+1,f
  1725  0247  2A44               	goto	u102_27
  1726  0248  0BD9               	decfsz	??_buttonINT+2,f
  1727  0249  2A44               	goto	u102_27
  1728  024A  2A4B               	nop2
  1729                           
  1730                           ;main.c: 255: PORTAbits.RA2 = 0x00;
  1731  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1732  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1733  024D  1105               	bcf	5,2	;volatile
  1734                           
  1735                           ;main.c: 256: }
  1736                           ;main.c: 258: } else if(!PORTBbits.RB3){
  1737  024E  2A6F               	goto	i1l185
  1738  024F                     i1l186:	
  1739  024F  1986               	btfsc	6,3	;volatile
  1740  0250  2A68               	goto	i1l190
  1741                           
  1742                           ;main.c: 259: getNextManager();
  1743  0251  118A  23A3  118A   	fcall	_getNextManager
  1744                           
  1745                           ;main.c: 261: PORTAbits.RA4 = 0x01;
  1746  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0256  1605               	bsf	5,4	;volatile
  1749                           
  1750                           ;main.c: 262: _delay((unsigned long)((500)*(8000000/4000.0)));
  1751  0257  3006               	movlw	6
  1752  0258  00D9               	movwf	??_buttonINT+2
  1753  0259  3013               	movlw	19
  1754  025A  00D8               	movwf	??_buttonINT+1
  1755  025B  30B1               	movlw	177
  1756  025C  00D7               	movwf	??_buttonINT
  1757  025D                     u103_27:	
  1758  025D  0BD7               	decfsz	??_buttonINT,f
  1759  025E  2A5D               	goto	u103_27
  1760  025F  0BD8               	decfsz	??_buttonINT+1,f
  1761  0260  2A5D               	goto	u103_27
  1762  0261  0BD9               	decfsz	??_buttonINT+2,f
  1763  0262  2A5D               	goto	u103_27
  1764  0263  2A64               	nop2
  1765                           
  1766                           ;main.c: 263: PORTAbits.RA4 = 0x00;
  1767  0264  1283               	bcf	3,5	;RP0=0, select bank0
  1768  0265  1303               	bcf	3,6	;RP1=0, select bank0
  1769  0266  1205               	bcf	5,4	;volatile
  1770                           
  1771                           ;main.c: 264: }
  1772  0267  2A6F               	goto	i1l185
  1773  0268                     i1l190:	
  1774                           
  1775                           ;main.c: 265: else if(!PORTBbits.RB2){
  1776  0268  1906               	btfsc	6,2	;volatile
  1777  0269  2A6E               	goto	i1l192
  1778                           
  1779                           ;main.c: 266: CashierNormalButton();
  1780  026A  118A  230F  118A   	fcall	_CashierNormalButton
  1781                           
  1782                           ;main.c: 267: }
  1783  026D  2A6F               	goto	i1l185
  1784  026E                     i1l192:	
  1785                           
  1786                           ;main.c: 268: else if(!PORTBbits.RB1){
  1787  026E  0806               	movf	6,w	;volatile
  1788  026F                     i1l185:	
  1789                           
  1790                           ;main.c: 270: }
  1791                           ;main.c: 271: }
  1792                           ;main.c: 273: INTCONbits.RBIF = 0x00;
  1793  026F  100B               	bcf	11,0	;volatile
  1794  0270                     L1:	
  1795  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1796  0271  1303               	bcf	3,6	;RP1=0, select bank0
  1797  0272  085D               	movf	??_buttonINT+6,w
  1798  0273  00FF               	movwf	127
  1799  0274  085C               	movf	??_buttonINT+5,w
  1800  0275  008A               	movwf	10
  1801  0276  085B               	movf	??_buttonINT+4,w
  1802  0277  0084               	movwf	4
  1803  0278  0E5A               	swapf	(??_buttonINT+3)^0,w
  1804  0279  0083               	movwf	3
  1805  027A  0EFE               	swapf	126,f
  1806  027B  0E7E               	swapf	126,w
  1807  027C  0009               	retfie
  1808  027D                     __end_of_buttonINT:	
  1809                           
  1810                           	psect	intentry
  1811  0004                     __pintentry:	
  1812                           ;incstack = 0
  1813                           ; Regs used in _buttonINT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1814                           
  1815  0004                     interrupt_function:	
  1816  007E                     saved_w	set	btemp
  1817  0004  00FE               	movwf	btemp
  1818  0005  0E03               	swapf	3,w
  1819  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1820  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0008  00DA               	movwf	??_buttonINT+3
  1822  0009  0804               	movf	4,w
  1823  000A  00DB               	movwf	??_buttonINT+4
  1824  000B  080A               	movf	10,w
  1825  000C  00DC               	movwf	??_buttonINT+5
  1826  000D  087F               	movf	btemp+1,w
  1827  000E  00DD               	movwf	??_buttonINT+6
  1828  000F  118A  2A0A         	ljmp	_buttonINT
  1829                           
  1830                           	psect	text10
  1831  03A3                     __ptext10:	
  1832 ;; *************** function _getNextManager *****************
  1833 ;; Defined at:
  1834 ;;		line 127 in file "main.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1848 ;;      Params:         0       0       0       0
  1849 ;;      Locals:         0       0       0       0
  1850 ;;      Temps:          1       0       0       0
  1851 ;;      Totals:         1       0       0       0
  1852 ;;Total ram usage:        1 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_buttonINT
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           
  1862                           ;psect for function _getNextManager
  1863  03A3                     _getNextManager:	
  1864                           
  1865                           ;main.c: 129: msize = msize - 1;
  1866                           
  1867                           ;incstack = 0
  1868                           ; Regs used in _getNextManager: [wreg+status,2+status,0]
  1869  03A3  087B               	movf	_msize,w
  1870  03A4  3EFF               	addlw	255
  1871  03A5  00F0               	movwf	??_getNextManager
  1872  03A6  0870               	movf	??_getNextManager,w
  1873  03A7  00FB               	movwf	_msize
  1874                           
  1875                           ;main.c: 130: mnext = mnext -1;
  1876  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  1877  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  1878  03AA  0852               	movf	_mnext,w
  1879  03AB  3EFF               	addlw	255
  1880  03AC  00F0               	movwf	??_getNextManager
  1881  03AD  0870               	movf	??_getNextManager,w
  1882  03AE  00D2               	movwf	_mnext
  1883  03AF  0008               	return
  1884  03B0                     __end_of_getNextManager:	
  1885                           
  1886                           	psect	text11
  1887  02CD                     __ptext11:	
  1888 ;; *************** function _ManagerNormalButton *****************
  1889 ;; Defined at:
  1890 ;;		line 191 in file "main.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      void 
  1897 ;; Registers used:
  1898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1904 ;;      Params:         0       0       0       0
  1905 ;;      Locals:         0       0       0       0
  1906 ;;      Temps:          3       0       0       0
  1907 ;;      Totals:         3       0       0       0
  1908 ;;Total ram usage:        3 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    1
  1911 ;; This function calls:
  1912 ;;		_SPI_send
  1913 ;; This function is called by:
  1914 ;;		_buttonINT
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           
  1919                           ;psect for function _ManagerNormalButton
  1920  02CD                     _ManagerNormalButton:	
  1921                           
  1922                           ;main.c: 193: if(msize == 0x14){
  1923                           
  1924                           ;incstack = 0
  1925                           ; Regs used in _ManagerNormalButton: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1926  02CD  3014               	movlw	20
  1927  02CE  067B               	xorwf	_msize,w
  1928  02CF  1903               	btfsc	3,2
  1929  02D0  0008               	return
  1930                           
  1931                           ;main.c: 195: }
  1932                           ;main.c: 197: if(mlast == 0x13){
  1933                           
  1934                           ;main.c: 194: return;
  1935  02D1  3013               	movlw	19
  1936  02D2  067A               	xorwf	_mlast,w
  1937  02D3  1903               	btfsc	3,2
  1938                           
  1939                           ;main.c: 198: mlast = 0x00;
  1940  02D4  01FA               	clrf	_mlast
  1941                           
  1942                           ;main.c: 199: }
  1943                           ;main.c: 201: if(mCount == 0x3E7){
  1944  02D5  30E7               	movlw	231
  1945  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1946  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1947  02D8  064A               	xorwf	_mCount,w
  1948  02D9  3003               	movlw	3
  1949  02DA  1903               	skipnz
  1950  02DB  064B               	xorwf	_mCount+1,w
  1951  02DC  1D03               	btfss	3,2
  1952  02DD  2AE0               	goto	i1l1203
  1953                           
  1954                           ;main.c: 202: mCount = 0x00;
  1955  02DE  01CA               	clrf	_mCount
  1956  02DF  01CB               	clrf	_mCount+1
  1957  02E0                     i1l1203:	
  1958                           
  1959                           ;main.c: 203: }
  1960                           ;main.c: 206: msize = msize + 1;
  1961  02E0  087B               	movf	_msize,w
  1962  02E1  3E01               	addlw	1
  1963  02E2  00F1               	movwf	??_ManagerNormalButton
  1964  02E3  0871               	movf	??_ManagerNormalButton,w
  1965  02E4  00FB               	movwf	_msize
  1966                           
  1967                           ;main.c: 207: mCount = mCount + 1;
  1968  02E5  084A               	movf	_mCount,w
  1969  02E6  3E01               	addlw	1
  1970  02E7  00CA               	movwf	_mCount
  1971  02E8  084B               	movf	_mCount+1,w
  1972  02E9  1803               	skipnc
  1973  02EA  3E01               	addlw	1
  1974  02EB  3E00               	addlw	0
  1975  02EC  00CB               	movwf	_mCount+1
  1976                           
  1977                           ;main.c: 209: mqueue[mlast] = mCount;
  1978  02ED  087A               	movf	_mlast,w
  1979  02EE  00F1               	movwf	??_ManagerNormalButton
  1980  02EF  0771               	addwf	??_ManagerNormalButton,w
  1981  02F0  3E20               	addlw	(low (_mqueue| 0))& (0+255)
  1982  02F1  0084               	movwf	4
  1983  02F2  084A               	movf	_mCount,w
  1984  02F3  1383               	bcf	3,7	;select IRP bank0
  1985  02F4  0080               	movwf	0
  1986  02F5  0A84               	incf	4,f
  1987  02F6  084B               	movf	_mCount+1,w
  1988  02F7  0080               	movwf	0
  1989                           
  1990                           ;main.c: 210: mlast = mlast + 1;
  1991  02F8  087A               	movf	_mlast,w
  1992  02F9  3E01               	addlw	1
  1993  02FA  00F1               	movwf	??_ManagerNormalButton
  1994  02FB  0871               	movf	??_ManagerNormalButton,w
  1995  02FC  00FA               	movwf	_mlast
  1996                           
  1997                           ;main.c: 211: SPI_send('A');
  1998  02FD  3041               	movlw	65
  1999  02FE  118A  2385  118A   	fcall	_SPI_send
  2000                           
  2001                           ;main.c: 212: _delay((unsigned long)((500)*(8000000/4000.0)));
  2002  0301  3006               	movlw	6
  2003  0302  00F3               	movwf	??_ManagerNormalButton+2
  2004  0303  3013               	movlw	19
  2005  0304  00F2               	movwf	??_ManagerNormalButton+1
  2006  0305  30B1               	movlw	177
  2007  0306  00F1               	movwf	??_ManagerNormalButton
  2008  0307                     u104_27:	
  2009  0307  0BF1               	decfsz	??_ManagerNormalButton,f
  2010  0308  2B07               	goto	u104_27
  2011  0309  0BF2               	decfsz	??_ManagerNormalButton+1,f
  2012  030A  2B07               	goto	u104_27
  2013  030B  0BF3               	decfsz	??_ManagerNormalButton+2,f
  2014  030C  2B07               	goto	u104_27
  2015  030D  2B0E               	nop2
  2016  030E  0008               	return
  2017  030F                     __end_of_ManagerNormalButton:	
  2018                           
  2019                           	psect	text12
  2020  030F                     __ptext12:	
  2021 ;; *************** function _CashierNormalButton *****************
  2022 ;; Defined at:
  2023 ;;		line 168 in file "main.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;		None
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2037 ;;      Params:         0       0       0       0
  2038 ;;      Locals:         0       0       0       0
  2039 ;;      Temps:          1       0       0       0
  2040 ;;      Totals:         1       0       0       0
  2041 ;;Total ram usage:        1 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    2
  2044 ;; This function calls:
  2045 ;;		_SPI_sendString
  2046 ;; This function is called by:
  2047 ;;		_buttonINT
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function _CashierNormalButton
  2053  030F                     _CashierNormalButton:	
  2054                           
  2055                           ;main.c: 170: if(csize == 0x14){
  2056                           
  2057                           ;incstack = 0
  2058                           ; Regs used in _CashierNormalButton: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  2059  030F  3014               	movlw	20
  2060  0310  0679               	xorwf	_csize,w
  2061  0311  1903               	btfsc	3,2
  2062  0312  0008               	return
  2063                           
  2064                           ;main.c: 172: }
  2065                           ;main.c: 174: if(clast == 0x13){
  2066                           
  2067                           ;main.c: 171: return;
  2068  0313  3013               	movlw	19
  2069  0314  0678               	xorwf	_clast,w
  2070  0315  1903               	btfsc	3,2
  2071                           
  2072                           ;main.c: 175: clast = 0x00;
  2073  0316  01F8               	clrf	_clast
  2074                           
  2075                           ;main.c: 176: }
  2076                           ;main.c: 178: if(cCount == 0xBB7){
  2077  0317  30B7               	movlw	183
  2078  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0319  1303               	bcf	3,6	;RP1=0, select bank0
  2080  031A  0648               	xorwf	_cCount,w
  2081  031B  300B               	movlw	11
  2082  031C  1903               	skipnz
  2083  031D  0649               	xorwf	_cCount+1,w
  2084  031E  1D03               	btfss	3,2
  2085  031F  2B24               	goto	i1l1181
  2086                           
  2087                           ;main.c: 179: cCount = 0x7CF;
  2088  0320  30CF               	movlw	207
  2089  0321  00C8               	movwf	_cCount
  2090  0322  3007               	movlw	7
  2091  0323  00C9               	movwf	_cCount+1
  2092  0324                     i1l1181:	
  2093                           
  2094                           ;main.c: 180: }
  2095                           ;main.c: 183: csize = csize + 1;
  2096  0324  0879               	movf	_csize,w
  2097  0325  3E01               	addlw	1
  2098  0326  00F7               	movwf	??_CashierNormalButton
  2099  0327  0877               	movf	??_CashierNormalButton,w
  2100  0328  00F9               	movwf	_csize
  2101                           
  2102                           ;main.c: 184: cCount = cCount + 1;
  2103  0329  0848               	movf	_cCount,w
  2104  032A  3E01               	addlw	1
  2105  032B  00C8               	movwf	_cCount
  2106  032C  0849               	movf	_cCount+1,w
  2107  032D  1803               	skipnc
  2108  032E  3E01               	addlw	1
  2109  032F  3E00               	addlw	0
  2110  0330  00C9               	movwf	_cCount+1
  2111                           
  2112                           ;main.c: 186: cqueue[clast] = mCount;
  2113  0331  0878               	movf	_clast,w
  2114  0332  00F7               	movwf	??_CashierNormalButton
  2115  0333  0777               	addwf	??_CashierNormalButton,w
  2116  0334  3EA0               	addlw	(low (_cqueue| 0))& (0+255)
  2117  0335  0084               	movwf	4
  2118  0336  084A               	movf	_mCount,w
  2119  0337  1383               	bcf	3,7	;select IRP bank1
  2120  0338  0080               	movwf	0
  2121  0339  0A84               	incf	4,f
  2122  033A  084B               	movf	_mCount+1,w
  2123  033B  0080               	movwf	0
  2124                           
  2125                           ;main.c: 187: clast = clast + 1;
  2126  033C  0878               	movf	_clast,w
  2127  033D  3E01               	addlw	1
  2128  033E  00F7               	movwf	??_CashierNormalButton
  2129  033F  0877               	movf	??_CashierNormalButton,w
  2130  0340  00F8               	movwf	_clast
  2131                           
  2132                           ;main.c: 188: SPI_sendString();
  2133  0341  118A  2344         	fcall	_SPI_sendString
  2134  0343  0008               	return
  2135  0344                     __end_of_CashierNormalButton:	
  2136                           
  2137                           	psect	text13
  2138  0344                     __ptext13:	
  2139 ;; *************** function _SPI_sendString *****************
  2140 ;; Defined at:
  2141 ;;		line 113 in file "main.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  i               2    5[COMMON] int 
  2146 ;;  data            4    1[COMMON] unsigned char [4]
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2156 ;;      Params:         0       0       0       0
  2157 ;;      Locals:         6       0       0       0
  2158 ;;      Temps:          0       0       0       0
  2159 ;;      Totals:         6       0       0       0
  2160 ;;Total ram usage:        6 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    1
  2163 ;; This function calls:
  2164 ;;		_SPI_send
  2165 ;; This function is called by:
  2166 ;;		_CashierNormalButton
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function _SPI_sendString
  2172  0344                     _SPI_sendString:	
  2173                           
  2174                           ;main.c: 114: char data[4] = {1, 0, 0 ,1};
  2175                           
  2176                           ;incstack = 0
  2177                           ; Regs used in _SPI_sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2178  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2179  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2180  0346  0863               	movf	SPI_sendString@F1589+3,w
  2181  0347  00F4               	movwf	SPI_sendString@data+3
  2182  0348  0862               	movf	SPI_sendString@F1589+2,w
  2183  0349  00F3               	movwf	SPI_sendString@data+2
  2184  034A  0861               	movf	SPI_sendString@F1589+1,w
  2185  034B  00F2               	movwf	SPI_sendString@data+1
  2186  034C  0860               	movf	SPI_sendString@F1589,w
  2187  034D  00F1               	movwf	SPI_sendString@data
  2188                           
  2189                           ;main.c: 115: for(int i = 0; i < 4; i++){
  2190  034E  01F5               	clrf	SPI_sendString@i
  2191  034F  01F6               	clrf	SPI_sendString@i+1
  2192  0350                     L2:	
  2193  0350  0876               	movf	SPI_sendString@i+1,w
  2194  0351  3A80               	xorlw	128
  2195  0352  00FF               	movwf	127
  2196  0353  3080               	movlw	128
  2197  0354  027F               	subwf	127,w
  2198  0355  1D03               	skipz
  2199  0356  2B59               	goto	u55_25
  2200  0357  3004               	movlw	4
  2201  0358  0275               	subwf	SPI_sendString@i,w
  2202  0359                     u55_25:	
  2203  0359  1803               	btfsc	3,0
  2204  035A  0008               	return
  2205                           
  2206                           ;main.c: 116: SPI_send(data[i]);
  2207  035B  0875               	movf	SPI_sendString@i,w
  2208  035C  3E71               	addlw	(low (SPI_sendString@data| 0))& (0+255)
  2209  035D  0084               	movwf	4
  2210  035E  0800               	movf	0,w
  2211  035F  118A  2385  118A   	fcall	_SPI_send
  2212  0362  3001               	movlw	1
  2213  0363  07F5               	addwf	SPI_sendString@i,f
  2214  0364  1803               	skipnc
  2215  0365  0AF6               	incf	SPI_sendString@i+1,f
  2216  0366  3000               	movlw	0
  2217  0367  07F6               	addwf	SPI_sendString@i+1,f
  2218  0368  2B50               	goto	L2
  2219  0369                     __end_of_SPI_sendString:	
  2220                           
  2221                           	psect	text14
  2222  0385                     __ptext14:	
  2223 ;; *************** function _SPI_send *****************
  2224 ;; Defined at:
  2225 ;;		line 95 in file "main.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  data            1    wreg     unsigned char 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  data            1    0[COMMON] unsigned char 
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  1    wreg      void 
  2232 ;; Registers used:
  2233 ;;		wreg
  2234 ;; Tracked objects:
  2235 ;;		On entry : 0/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2239 ;;      Params:         0       0       0       0
  2240 ;;      Locals:         1       0       0       0
  2241 ;;      Temps:          0       0       0       0
  2242 ;;      Totals:         1       0       0       0
  2243 ;;Total ram usage:        1 bytes
  2244 ;; Hardware stack levels used:    1
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_SPI_sendString
  2249 ;;		_ManagerNormalButton
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           
  2254                           ;psect for function _SPI_send
  2255  0385                     _SPI_send:	
  2256                           
  2257                           ;incstack = 0
  2258                           ; Regs used in _SPI_send: [wreg]
  2259                           ;SPI_send@data stored from wreg
  2260  0385  00F0               	movwf	SPI_send@data
  2261                           
  2262                           ;main.c: 96: SSPCONbits.CKP = 0;
  2263  0386  1283               	bcf	3,5	;RP0=0, select bank0
  2264  0387  1303               	bcf	3,6	;RP1=0, select bank0
  2265  0388  1214               	bcf	20,4	;volatile
  2266                           
  2267                           ;main.c: 97: SSPSTATbits.BF = 0;
  2268  0389  1683               	bsf	3,5	;RP0=1, select bank1
  2269  038A  1303               	bcf	3,6	;RP1=0, select bank1
  2270  038B  1014               	bcf	20,0	;volatile
  2271                           
  2272                           ;main.c: 98: SSPBUF = data;
  2273  038C  0870               	movf	SPI_send@data,w
  2274  038D  1283               	bcf	3,5	;RP0=0, select bank0
  2275  038E  1303               	bcf	3,6	;RP1=0, select bank0
  2276  038F  0093               	movwf	19	;volatile
  2277  0390                     i1l124:	
  2278                           ;main.c: 99: while(SSPSTATbits.BF);
  2279                           
  2280  0390  1683               	bsf	3,5	;RP0=1, select bank1
  2281  0391  1303               	bcf	3,6	;RP1=0, select bank1
  2282  0392  1C14               	btfss	20,0	;volatile
  2283  0393  0008               	return
  2284  0394  2B90               	goto	i1l124
  2285  0395                     __end_of_SPI_send:	
  2286  007E                     btemp	set	126	;btemp
  2287  007E                     wtemp	set	126
  2288  007E                     wtemp0	set	126
  2289  0080                     wtemp1	set	128
  2290  0082                     wtemp2	set	130
  2291  0084                     wtemp3	set	132
  2292  0086                     wtemp4	set	134
  2293  0088                     wtemp5	set	136
  2294  007F                     wtemp6	set	127
  2295  007E                     ttemp	set	126
  2296  007E                     ttemp0	set	126
  2297  0081                     ttemp1	set	129
  2298  0084                     ttemp2	set	132
  2299  0087                     ttemp3	set	135
  2300  007F                     ttemp4	set	127
  2301  007E                     ltemp	set	126
  2302  007E                     ltemp0	set	126
  2303  0082                     ltemp1	set	130
  2304  0086                     ltemp2	set	134
  2305  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80      9      68
    BANK1            80      0      80
    BANK2            80      0      40

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _buttonINT in COMMON

    _buttonINT->_CashierNormalButton
    _ManagerNormalButton->_SPI_send
    _CashierNormalButton->_SPI_sendString
    _SPI_sendString->_SPI_send

Critical Paths under _main in BANK0

    _connect_wifi->_tx_serial
    _new_at_com->_tx_serial

Critical Paths under _buttonINT in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _buttonINT in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _buttonINT in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      44
                                              8 BANK0      1     1      0
                       _connect_wifi
                          _rx_serial
                          _usartInit
                       _wait_Connect
 ---------------------------------------------------------------------------------
 (1) _wait_Connect                                         0     0      0       0
                          _rx_serial
 ---------------------------------------------------------------------------------
 (1) _usartInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _connect_wifi                                         0     0      0      44
                         _new_at_com
                          _tx_serial
                            _wait_ok
 ---------------------------------------------------------------------------------
 (2) _wait_ok                                              0     0      0       0
                          _rx_serial
 ---------------------------------------------------------------------------------
 (2) _rx_serial                                            0     0      0       0
                           _overflow
 ---------------------------------------------------------------------------------
 (3) _overflow                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _new_at_com                                           0     0      0      22
                          _tx_serial
 ---------------------------------------------------------------------------------
 (2) _tx_serial                                            1     1      0      22
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _buttonINT                                            7     7      0     136
                                              0 BANK0      7     7      0
                _CashierNormalButton
                _ManagerNormalButton
                     _getNextManager
 ---------------------------------------------------------------------------------
 (6) _getNextManager                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ManagerNormalButton                                  3     3      0      22
                                              1 COMMON     3     3      0
                           _SPI_send
 ---------------------------------------------------------------------------------
 (6) _CashierNormalButton                                  1     1      0     114
                                              7 COMMON     1     1      0
                     _SPI_sendString
 ---------------------------------------------------------------------------------
 (7) _SPI_sendString                                       6     6      0     114
                                              1 COMMON     6     6      0
                           _SPI_send
 ---------------------------------------------------------------------------------
 (7) _SPI_send                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _connect_wifi
     _new_at_com
       _tx_serial
     _tx_serial
     _wait_ok
       _rx_serial
         _overflow
   _rx_serial
     _overflow
   _usartInit
   _wait_Connect
     _rx_serial
       _overflow

 _buttonINT (ROOT)
   _CashierNormalButton
     _SPI_sendString
       _SPI_send
   _ManagerNormalButton
     _SPI_send
   _getNextManager

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0      28       7       50.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      50       5      100.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      9      44       3       85.0%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      CA      10        0.0%
ABS                  0      0      CA       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Nov 18 16:34:53 2016

                 __CFG_CP$OFF 0000                   _SSPSTATbits 0094                            fsr 0004  
                         l201 03D3                           l207 03B0                           l216 0369  
                         l225 0143          ?_CashierNormalButton 0070                  __CFG_CPD$OFF 0000  
               ?_connect_wifi 0070                           fsr0 0004                           indf 0000  
         SPI_sendString@F1589 0060                  __CFG_LVP$OFF 0000                          l1131 03B7  
                        l1481 02C0                          _IOCB 0096                          _PIE1 008C  
                __CFG_WRT$OFF 0000                          _main 027D                          btemp 007E  
                        ltemp 007E                          start 0011                          ttemp 007E  
                        wtemp 007E                 __CFG_IESO$OFF 0000         ??_CashierNormalButton 0077  
                       ?_main 0070                 __CFG_WDTE$OFF 0000                         _ANSEL 0188  
              ??_connect_wifi 005F                         i1l124 0390                         i1l190 0268  
                       i1l192 026E                         i1l185 026F                         i1l186 024F  
                       _RCREG 001A                         _RCSTA 0018                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       u55_25 0359                         _TRISA 0085                         _TRISB 0086  
                       _TXREG 0019                __CFG_FCMEN$OFF 0000                         _nRBPU 040F  
                       _clast 0078                         _cnext 0050                         _csize 0079  
                       _mlast 007A                         _mnext 0052                         _msize 007B  
     __size_of_SPI_sendString 0025                __CFG_BOREN$OFF 0000                         pclath 000A  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080               __end_of_wait_ok 0385              __end_of_SPI_send 0395  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F                __CFG_MCLRE$OFF 0000               __initialization 0013  
                __end_of_main 02CD                        ??_main 005F                        _ANSELH 0189  
                      u100_27 021A                        u101_27 022F                        i1l1203 02E0  
                      u102_27 0244                        i1l1181 0324                        u103_27 025D  
                      i1l1427 0239                        u104_27 0307                        _INTCON 000B  
                      _OSCCON 008F                        _TRISA5 042D                        _TRISC3 043B  
                      _TRISC4 043C                        _TRISC5 043D                        _TRISC6 043E  
                      _TRISC7 043F                        _SSPCON 0014                        _SSPBUF 0013  
              __CFG_PWRTE$OFF 0000                        _cCount 0048                        _mCount 004A  
                      _cqueue 00A0                        _guiche 0051                        _pclast 0053  
                      _pcnext 0054                        _pcsize 0055                        _pmlast 007C  
                      _pmnext 0056                        _mqueue 0020                        _pmsize 007D  
                      saved_w 007E              __end_of_overflow 03DD                     ??_wait_ok 005E  
     __end_of__initialization 003C          __end_of_connect_wifi 0143                __pcstackCOMMON 0070  
                __pidataBANK0 03DD                  SPI_send@data 0070                     ?_SPI_send 0070  
              _SPI_sendString 0344                    __pbssBANK0 0020                    __pbssBANK1 00A0  
                  __pbssBANK2 0120               SPI_sendString@i 0075            __size_of_buttonINT 0073  
                  __pmaintext 027D  __size_of_ManagerNormalButton 0042                    __pintentry 0004  
                  ??_SPI_send 0070       __size_of_getNextManager 000D        __end_of_SPI_sendString 0369  
                     _SSPSTAT 0094            __size_of_rx_serial 000C            __size_of_usartInit 000E  
          __size_of_tx_serial 0008                 ?_wait_Connect 0070   __end_of_CashierNormalButton 0344  
                   ?_overflow 0070                       __ptext1 0143                       __ptext2 0395  
                     __ptext3 003F                       __ptext4 0369                       __ptext5 03B0  
                     __ptext6 03D8                       __ptext7 03BC                       __ptext8 03D0  
                     __ptext9 020A                       _pcCount 004C                       _pmCount 004E  
           __end_of_buttonINT 027D                    _new_at_com 03BC                       _pcqueue 0120  
                     _wait_ok 0369               ?_SPI_sendString 0070                       _pmqueue 00C8  
                     clrloop0 03C9          end_of_initialization 003C         __size_of_connect_wifi 0104  
              ??_wait_Connect 005E                     _RCSTAbits 0018                    ??_overflow 005E  
           __end_of_rx_serial 03BC             __end_of_usartInit 03A3                     _PORTAbits 0005  
                   _PORTBbits 0006             __end_of_tx_serial 03D8                  _connect_wifi 003F  
              tx_serial@aChar 005E                     _TXSTAbits 0098            SPI_sendString@data 0071  
                 ?_new_at_com 0070                _getNextManager 03A3           start_initialization 0013  
           __size_of_SPI_send 0010           _ManagerNormalButton 02CD      __CFG_FOSC$INTRC_NOCLKOUT 0000  
        ?_ManagerNormalButton 0070                   __pdataBANK0 0060        __end_of_getNextManager 03B0  
                 __pbssCOMMON 0078                     ___latbits 0001                 __pcstackBANK0 0057  
        __end_of_wait_Connect 020A           __size_of_new_at_com 000C         ??_ManagerNormalButton 0071  
           __size_of_overflow 0005               ?_getNextManager 0070              ??_SPI_sendString 0071  
                    ?_wait_ok 0070                     _buttonINT 020A             interrupt_function 0004  
                   clear_ram0 03C8                      _PIE1bits 008C                      _PIR1bits 000C  
                    _SPI_send 0385  __size_of_CashierNormalButton 0035                     _rx_serial 03B0  
                   _usartInit 0395                     _tx_serial 03D0                    ?_buttonINT 0070  
       __size_of_wait_Connect 00C7                    ?_rx_serial 0070                  ??_new_at_com 005F  
                  ?_usartInit 0070                    ?_tx_serial 0070                      __ptext10 03A3  
                    __ptext11 02CD                      __ptext12 030F                      __ptext13 0344  
                    __ptext14 0385             __CFG_BOR4V$BOR40V 0000              __size_of_wait_ok 001C  
               __size_of_main 0050            __end_of_new_at_com 03C8                  _wait_Connect 0143  
                    _overflow 03D8                    _INTCONbits 000B                   ??_buttonINT 0057  
                    intlevel1 0000              ??_getNextManager 0070                   ??_rx_serial 005E  
                 ??_usartInit 005E                   ??_tx_serial 005E   __end_of_ManagerNormalButton 030F  
         _CashierNormalButton 030F                    _SSPCONbits 0014  
